#pragma once

#include "src/Physics/Time.hpp"
#include "src/Physics/Vectors.hpp"

// Holds a control basis which we can access by providing a vector of
// coefficients
// The coefficents are used as follows:
// coeffs[0] is the overall amplitude scaled by MaxAmp
// coeffs[1+i*num_coeffs_per_basisFn:1+i*(1+num_coeffs_per_basisFn)] are the coefficients for the i-th basis function
class Basis {

private:
    using BasisFn = std::function<RVec(std::vector<double>)>;
    using BasisGenerator = std::function<BasisFn()>;

    BasisGenerator m_basis_gen;
    std::vector<BasisFn> m_basis;

    // the number of coefficients each basis function wants to take
    const int m_num_coeffs_per_basisFn;
    // the size of the actual RVecs generated by the basis functions
    int m_t_size;

    // the maximum amplitude of the random controls we want to generate
    int m_maxAmp = 1;

    const static int default_basis_size = 10;

public:
    Basis(BasisGenerator basis, int num_coeffs, int num_basis_vectors = default_basis_size);
    enum Controls {
        Amplitude = 1 << 0,
        AmpFreq = 1 << 1,
        AmpPhase = 1 << 2,
        AmpFreqPhase = 1 << 3
    };

    static Basis TRIG(const RVec& t, double maxFreq,
        Controls controls = AmpFreqPhase,
        int num_basis_vectors = default_basis_size);
    static Basis TRIG(const Time& t, double maxFreq,
        Controls controls = AmpFreqPhase,
        int num_basis_vectors = default_basis_size);
    static Basis RESONANT(const RVec& t, RVec freqs,
        int num_basis_vectors = default_basis_size);

    // returns a random initial coefficients vector of appropriate size
    RVec randomCoeffs();
    // sets the maximum amplitude of the random controls
    Basis& setMaxAmp(double maxAmp);
    // generates a new basis set
    std::unique_ptr<Basis> generateNewBasis();

    // returns a control vector given a vector of coefficients
    RVec control(RVec coeffs);

    // the number of basis functions
    int num_basis_vectors();
    int num_coeffs();
};